# -*- coding: utf-8 -*-
"""fpar_modified.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zBJJmFnPfmskAEj2mhgG64xGRTgzbSLf
"""

#!pip install rasterio

#!pip install netCDF4

#!pip install rasterio

import matplotlib.pyplot as plt

import numpy as np
import rasterio
import xarray as xr

def process_fpar_to_netcdf(file1, file2, output_fpar_filename, output_qc_filename, lat_factor=6, lon_factor=6):
    """
    Processes the two GeoTIFF files, calculates the monthly mean, performs coarsening using xarray,
    and saves the results as NetCDF files.

    Parameters:
    - file1 (str): Path to the first GeoTIFF file (first half of month).
    - file2 (str): Path to the second GeoTIFF file (second half of month).
    - output_fpar_filename (str): Name for the output NetCDF file for FPAR data.
    - output_qc_filename (str): Name for the output NetCDF file for QC data.
    - lat_factor (int): Coarsening factor for latitude dimension.
    - lon_factor (int): Coarsening factor for longitude dimension.
    """

    # Open the files and process the bands
    with rasterio.open(file1) as src1, rasterio.open(file2) as src2:

        # Read FPAR (Band 1) and QC (Band 2) for both files
        data1_fpar = src1.read(1).astype(float)  # Band 1
        data1_qc = src1.read(2).astype(float)    # Band 2
        data2_fpar = src2.read(1).astype(float)  # Band 1
        data2_qc = src2.read(2).astype(float)    # Band 2

        # Replace fill values (65535) with NaN and scale FPAR values
        data1_fpar[data1_fpar == 65535] = np.nan
        data2_fpar[data2_fpar == 65535] = np.nan
        data1_fpar *= 0.001
        data2_fpar *= 0.001

        data1_qc[data1_qc == 65535] = np.nan
        data2_qc[data2_qc == 65535] = np.nan

        # Extract latitudes and longitudes from the raster metadata (for initial shape)
        latitudes = np.linspace(src1.bounds.top, src1.bounds.bottom, src1.height)  # from top to bottom (north to south)
        longitudes = np.linspace(src1.bounds.left, src1.bounds.right, src1.width)  # from left to right (west to east)

    # Convert to xarray.DataArray
    fpar1_xr = xr.DataArray(data1_fpar, dims=["latitude", "longitude"], coords={"latitude": latitudes, "longitude": longitudes})
    fpar2_xr = xr.DataArray(data2_fpar, dims=["latitude", "longitude"], coords={"latitude": latitudes, "longitude": longitudes})

    qc1_xr = xr.DataArray(data1_qc, dims=["latitude", "longitude"], coords={"latitude": latitudes, "longitude": longitudes})
    qc2_xr = xr.DataArray(data2_qc, dims=["latitude", "longitude"], coords={"latitude": latitudes, "longitude": longitudes})

    # Calculate monthly means for FPAR and QC using xarray (NaN's will be automatically handled)
    fpar_monthly_mean = xr.concat([fpar1_xr, fpar2_xr], dim="time").mean(dim="time", skipna=True)
    qc_monthly_mean = xr.concat([qc1_xr, qc2_xr], dim="time").mean(dim="time", skipna=True)

    # Coarsen the data using xarray's .coarsen() method
    fpar_monthly_mean_coarsened = fpar_monthly_mean.coarsen(latitude=lat_factor, longitude=lon_factor, boundary="trim").mean()
    qc_monthly_mean_coarsened = qc_monthly_mean.coarsen(latitude=lat_factor, longitude=lon_factor, boundary="trim").mean()

    # Function to save data as a NetCDF file
    def save_to_netcdf(filename, data, var_name, description, units):
        """
        Saves the data as a NetCDF file with proper variable names, dimensions, and attributes.

        Parameters:
        - filename (str): Path to the output NetCDF file.
        - data (xarray.DataArray): The data to be saved.
        - var_name (str): The name of the variable in the NetCDF file.
        - description (str): Description of the data.
        - units (str): Units of the data.
        """
        # Create an xarray Dataset from the coarsened data
        ds = xr.Dataset(
            {
                var_name: (["latitude", "longitude"], data.data),  # Use .data to extract the numpy array
            },
            coords={
                "latitude": data.latitude,
                "longitude": data.longitude,
            },
        )

        # Add attributes to variables
        ds[var_name].attrs["description"] = description
        ds[var_name].attrs["units"] = units

        # Add coordinate attributes
        ds["latitude"].attrs["units"] = "degrees_north"
        ds["longitude"].attrs["units"] = "degrees_east"

        # Add global attributes
        ds.attrs["description"] = description

        # Save the Dataset to a NetCDF file
        ds.to_netcdf(filename)

        print(f"NetCDF file saved: {filename}")

    # Save FPAR and QC data as separate NetCDF files
    save_to_netcdf(
        output_fpar_filename, fpar_monthly_mean_coarsened, var_name="fpar", description="Monthly mean FPAR, sourced from PKU  GIMMS  NDVI  (1982 — 2015) & SI FPAR CDR  (2016 — 2022)",
        units="Fraction",  long_name = "Fraction of photosynthetic active radiation"
    )
    save_to_netcdf(
        output_qc_filename, qc_monthly_mean_coarsened, var_name="qc", description="Monthly mean Quality Control (QC) data, inherited from PKU GIMMS NDVI 1982-2015. Here quality of data points are defined as 0,1,2,3, in decreasing order. For 2016-2022 the data are from SI FPAR CDR, and the QC is 9.", units=None, long_name="Quality Control")


    print(f"NetCDF files saved: '{output_fpar_filename}' and '{output_qc_filename}'")

def run(prefix, start_year, end_year):

  duration = np.linspace(start_year, end_year, end_year - start_year + 1)

  old_files = []
  new_files = []

  for i in duration:
    for j in np.linspace(1,12,12):
      month = int(j)
      year = int(i)

      file_1 = prefix + f"{year}{month:02d}01.tif"
      file_2 = prefix + f"{year}{month:02d}02.tif"
      old_files.append([file_1, file_2])

      output_file_1 ="mod_" + "_FPAR_" + f"{year}{month:02d}.nc"
      output_file_2 ="mod_" + "_QC_" + f"{year}{month:02d}.nc"
      new_files.append([output_file_1, output_file_2])



      process_fpar_to_netcdf(
        file1= file_1,
        file2= file_2,
        output_fpar_filename= output_file_1,
        output_qc_filename= output_file_2,
        lat_factor=6,
        lon_factor=6)





  return new_files

prefix = "GIMMS_FPAR4g_"
run(prefix, 1982, 2022)
